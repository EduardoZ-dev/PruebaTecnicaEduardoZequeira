// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RouletteTechTest.API.Data.Context;

#nullable disable

namespace RouletteTechTest.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250408223757_AddUserNameToRound")]
    partial class AddUserNameToRound
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("RouletteTechTest.API.Models.Entities.Bet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BetValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Outcome")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Prize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("RoundId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.HasIndex("UserId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("RouletteTechTest.API.Models.Entities.Round", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("RouletteTechTest.API.Models.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("RouletteTechTest.API.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SessionUser", b =>
                {
                    b.Property<Guid>("PlayersId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SessionsId")
                        .HasColumnType("TEXT");

                    b.HasKey("PlayersId", "SessionsId");

                    b.HasIndex("SessionsId");

                    b.ToTable("SessionPlayers", (string)null);
                });

            modelBuilder.Entity("RouletteTechTest.API.Models.Entities.Bet", b =>
                {
                    b.HasOne("RouletteTechTest.API.Models.Entities.Round", "Round")
                        .WithMany("Bets")
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RouletteTechTest.API.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Round");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RouletteTechTest.API.Models.Entities.Round", b =>
                {
                    b.HasOne("RouletteTechTest.API.Models.Entities.Session", "Session")
                        .WithMany("Rounds")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("RouletteTechTest.API.Models.DTOs.Common.SpinResultDTO", "Result", b1 =>
                        {
                            b1.Property<Guid>("RoundId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Color")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Parity")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("ResultNumber")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime>("SpinTime")
                                .HasColumnType("TEXT");

                            b1.HasKey("RoundId");

                            b1.ToTable("Rounds");

                            b1.WithOwner()
                                .HasForeignKey("RoundId");
                        });

                    b.Navigation("Result");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("SessionUser", b =>
                {
                    b.HasOne("RouletteTechTest.API.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("PlayersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RouletteTechTest.API.Models.Entities.Session", null)
                        .WithMany()
                        .HasForeignKey("SessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RouletteTechTest.API.Models.Entities.Round", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("RouletteTechTest.API.Models.Entities.Session", b =>
                {
                    b.Navigation("Rounds");
                });
#pragma warning restore 612, 618
        }
    }
}
